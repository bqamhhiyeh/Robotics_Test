// Generated by gencpp from file teleoperation/Status.msg
// DO NOT EDIT!


#ifndef TELEOPERATION_MESSAGE_STATUS_H
#define TELEOPERATION_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teleoperation
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : battery_level(0.0)
    , current(0.0)
    , ADC1(0)
    , ADC2(0)
    , ADC3(0)
    , ADC4(0)
    , speed_front_left(0.0)
    , speed_front_right(0.0)
    , odometry_left(0.0)
    , odometry_right(0.0)
    , version(0)
    , relay1(0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : battery_level(0.0)
    , current(0.0)
    , ADC1(0)
    , ADC2(0)
    , ADC3(0)
    , ADC4(0)
    , speed_front_left(0.0)
    , speed_front_right(0.0)
    , odometry_left(0.0)
    , odometry_right(0.0)
    , version(0)
    , relay1(0)  {
  (void)_alloc;
    }



   typedef double _battery_level_type;
  _battery_level_type battery_level;

   typedef double _current_type;
  _current_type current;

   typedef int32_t _ADC1_type;
  _ADC1_type ADC1;

   typedef int32_t _ADC2_type;
  _ADC2_type ADC2;

   typedef int32_t _ADC3_type;
  _ADC3_type ADC3;

   typedef int32_t _ADC4_type;
  _ADC4_type ADC4;

   typedef double _speed_front_left_type;
  _speed_front_left_type speed_front_left;

   typedef double _speed_front_right_type;
  _speed_front_right_type speed_front_right;

   typedef double _odometry_left_type;
  _odometry_left_type odometry_left;

   typedef double _odometry_right_type;
  _odometry_right_type odometry_right;

   typedef int32_t _version_type;
  _version_type version;

   typedef int32_t _relay1_type;
  _relay1_type relay1;




  typedef boost::shared_ptr< ::teleoperation::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teleoperation::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::teleoperation::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::teleoperation::Status > StatusPtr;
typedef boost::shared_ptr< ::teleoperation::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teleoperation::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teleoperation::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace teleoperation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'teleoperation': ['/home/bashar/catkin_test/src/teleoperation/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::teleoperation::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teleoperation::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teleoperation::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teleoperation::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teleoperation::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teleoperation::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teleoperation::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37bcaf258748a50f0e114a698e6097e9";
  }

  static const char* value(const ::teleoperation::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37bcaf258748a50fULL;
  static const uint64_t static_value2 = 0x0e114a698e6097e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::teleoperation::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teleoperation/Status";
  }

  static const char* value(const ::teleoperation::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teleoperation::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 battery_level\n\
float64 current\n\
int32 ADC1\n\
int32 ADC2\n\
int32 ADC3\n\
int32 ADC4\n\
float64 speed_front_left\n\
float64 speed_front_right\n\
float64 odometry_left\n\
float64 odometry_right\n\
int32 version\n\
int32 relay1\n\
";
  }

  static const char* value(const ::teleoperation::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teleoperation::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_level);
      stream.next(m.current);
      stream.next(m.ADC1);
      stream.next(m.ADC2);
      stream.next(m.ADC3);
      stream.next(m.ADC4);
      stream.next(m.speed_front_left);
      stream.next(m.speed_front_right);
      stream.next(m.odometry_left);
      stream.next(m.odometry_right);
      stream.next(m.version);
      stream.next(m.relay1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teleoperation::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teleoperation::Status_<ContainerAllocator>& v)
  {
    s << indent << "battery_level: ";
    Printer<double>::stream(s, indent + "  ", v.battery_level);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
    s << indent << "ADC1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC1);
    s << indent << "ADC2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC2);
    s << indent << "ADC3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC3);
    s << indent << "ADC4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ADC4);
    s << indent << "speed_front_left: ";
    Printer<double>::stream(s, indent + "  ", v.speed_front_left);
    s << indent << "speed_front_right: ";
    Printer<double>::stream(s, indent + "  ", v.speed_front_right);
    s << indent << "odometry_left: ";
    Printer<double>::stream(s, indent + "  ", v.odometry_left);
    s << indent << "odometry_right: ";
    Printer<double>::stream(s, indent + "  ", v.odometry_right);
    s << indent << "version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.version);
    s << indent << "relay1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.relay1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TELEOPERATION_MESSAGE_STATUS_H
